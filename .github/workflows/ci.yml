name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        rust: [stable]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libvulkan-dev vulkan-validationlayers spirv-tools
        sudo apt-get install -y libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev libfontconfig1-dev

    - name: Install Vulkan SDK (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $vulkanVersion = "1.3.290.0"
        $vulkanUrl = "https://sdk.lunarg.com/sdk/download/$vulkanVersion/windows/VulkanSDK-$vulkanVersion-Installer.exe"
        $installerPath = "$env:TEMP\VulkanSDK-Installer.exe"
        Invoke-WebRequest -Uri $vulkanUrl -OutFile $installerPath
        Start-Process -FilePath $installerPath -ArgumentList "/S" -Wait
        echo "C:\VulkanSDK\$vulkanVersion\Bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Compile shaders
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          sleep 2
        fi
        for shader in shaders/*.vert shaders/*.frag; do
          glslc "$shader" -o "${shader}.spv" || echo "Warning: Failed to compile $shader"
        done

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: cargo test --verbose

    - name: Run coordinate system tests
      run: cargo test --test coordinate_test -- --nocapture

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        rust: [stable]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libvulkan-dev vulkan-validationlayers spirv-tools
        sudo apt-get install -y libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev libfontconfig1-dev

    - name: Install Vulkan SDK (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $vulkanVersion = "1.3.290.0"
        $vulkanUrl = "https://sdk.lunarg.com/sdk/download/$vulkanVersion/windows/VulkanSDK-$vulkanVersion-Installer.exe"
        $installerPath = "$env:TEMP\VulkanSDK-Installer.exe"
        Invoke-WebRequest -Uri $vulkanUrl -OutFile $installerPath
        Start-Process -FilePath $installerPath -ArgumentList "/S" -Wait
        echo "C:\VulkanSDK\$vulkanVersion\Bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Compile shaders
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          sleep 2
        fi
        for shader in shaders/*.vert shaders/*.frag; do
          glslc "$shader" -o "${shader}.spv" || echo "Warning: Failed to compile $shader"
        done

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Build
      run: cargo build --verbose --release

    - name: Check formatting
      run: cargo fmt -- --check
      continue-on-error: true

    - name: Run clippy
      run: cargo clippy -- -D warnings
      continue-on-error: true

  shader-compile:
    name: Compile Shaders
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Vulkan SDK
      shell: pwsh
      run: |
        # Download Vulkan SDK
        $vulkanVersion = "1.3.290.0"
        $vulkanUrl = "https://sdk.lunarg.com/sdk/download/$vulkanVersion/windows/VulkanSDK-$vulkanVersion-Installer.exe"
        $installerPath = "$env:TEMP\VulkanSDK-Installer.exe"

        Write-Host "Downloading Vulkan SDK $vulkanVersion..."
        Invoke-WebRequest -Uri $vulkanUrl -OutFile $installerPath

        Write-Host "Installing Vulkan SDK..."
        Start-Process -FilePath $installerPath -ArgumentList "/S" -Wait

        # Add glslc to PATH
        $vulkanPath = "C:\VulkanSDK\$vulkanVersion"
        echo "$vulkanPath\Bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Compile shaders
      shell: bash
      run: |
        # Wait a moment for PATH to update
        sleep 2

        # Verify glslc is available
        which glslc || (find /c/VulkanSDK -name glslc.exe 2>/dev/null | head -1)

        # Compile shaders
        for shader in shaders/*.vert shaders/*.frag; do
          glslc "$shader" -o "${shader}.spv"
        done

    - name: Upload shader artifacts
      uses: actions/upload-artifact@v4
      with:
        name: compiled-shaders
        path: shaders/*.spv
